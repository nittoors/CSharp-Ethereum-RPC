<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EthereumRpc</name>
    </assembly>
    <members>
        <member name="P:EthereumRpc.Ethereum.Block.Number">
            <summary>
            the block number. null when its pending block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Hash">
            <summary>
            hash of the block. null when its pending block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.ParentHash">
            <summary>
             hash of the parent block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Nonce">
            <summary>
            hash of the generated proof-of-work. null when its pending block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Sha3Uncles">
            <summary>
            SHA3 of the uncles data in the block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.LogsBloom">
            <summary>
            the bloom filter for the logs of the block. null when its pending block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.TransactionsRoot">
            <summary>
            the root of the transaction trie of the block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.StateRoot">
            <summary>
            the root of the final state trie of the block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.ReceiptsRoot">
            <summary>
            the root of the receipts trie of the block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Miner">
            <summary>
            the address of the beneficiary to whom the mining rewards were given.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Difficulty">
            <summary>
             integer of the difficulty for this block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.TotalDifficulty">
            <summary>
            integer of the total difficulty of the chain until this block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.ExtraData">
            <summary>
            the "extra data" field of this block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Size">
            <summary>
            integer the size of this block in bytes.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.GasLimit">
            <summary>
             the maximum gas allowed in this block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.GasUsed">
            <summary>
            the total used gas by all transactions in this block.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Timestamp">
            <summary>
            the unix timestamp for when the block was collated.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.TransactionHashes">
            <summary>
            Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Block.Uncles">
            <summary>
            Array of uncle hashes.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Filter.FromBlock">
            <summary>
            (optional, default: "latest") Integer block number, or "latest" for the last mined block or "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Filter.ToBlock">
            <summary>
            (optional, default: "latest") Integer block number, or "latest" for the last mined block or "pending", "earliest" for not yet mined transactions.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Filter.Address">
            <summary>
             (optional) Contract address or a list of addresses from which logs should originate.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Filter.Topics">
            <summary>
            (optional) Array of 32 Bytes DATA topics.Each topic can also be an array of DATA with "or" options.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.Type">
            <summary>
            TAG - pending when the log is pending.mined if log is already mined.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.LogIndex">
            <summary>
            integer of the log index position in the block. null when its pending log.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.TransactionIndex">
            <summary>
            integer of the transactions index position log was created from. null when its pending log.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.TransactionHash">
            <summary>
            hash of the transactions this log was created from. null when its pending log.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.BlockHash">
            <summary>
            hash of the block where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.BlockNumber">
            <summary>
            the block number where this log was in. null when its pending. null when its pending log.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.Address">
            <summary>
            address from which this log originated.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Log.Data">
            <summary>
            contains one or more 32 Bytes non-indexed arguments of the log.
            </summary>
        </member>
        <member name="M:EthereumRpc.Ethereum.Log.#ctor(System.Object)">
            <summary>
            Array of 0 to 4 32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.)
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.From">
            <summary>
            60 Bytes - (optional) The identity of the sender.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.To">
            <summary>
            60 Bytes - (optional) The identity of the receiver.When present whisper will encrypt the message so that only the receiver can decrypt it.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.Topics">
            <summary>
            Array of DATA - Array of DATA topics, for the receiver to identify messages.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.Payload">
            <summary>
            The payload of the message.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.Priority">
            <summary>
            The integer of the priority in a rang from... (?).
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Whisper.Ttl">
            <summary>
            integer of the time to live in seconds.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Work.BlockHeaderPowHash">
            <summary>
            current block header pow-hash
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Work.SeedHash">
            <summary>
            the seed hash used for the DAG.
            </summary>
        </member>
        <member name="P:EthereumRpc.Ethereum.Work.Target">
            <summary>
            the boundary condition ("target"), 2^256 / difficulty.
            </summary>
        </member>
        <member name="P:EthereumRpc.RpcObjects.Transaction.CumulativeGasUsed">
            <summary>
            The total amount of gas used when this transaction was executed in the block.
            </summary>
        </member>
        <member name="P:EthereumRpc.RpcObjects.Transaction.ContractAddress">
            <summary>
             The contract address created, if the transaction was a contract creation, otherwise null.
            </summary>
        </member>
        <member name="P:EthereumRpc.RpcObjects.Transaction.Logs">
            <summary>
            Array of log objects, which this transaction generated.
            </summary>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetWeb3ClientVersion">
            <summary>
            Returns the current client version
            </summary>
            <returns>The current client version</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetWeb3Sha3(System.String)">
            <summary>
             Returns Keccak-256 (not the standardized SHA3-256) of the given data.
            </summary>
            <param name="value"> the data to convert into a SHA3 hash</param>
            <returns>The SHA3 result of the given string.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetNetVersion">
            <summary>
            Returns the current network protocol version.
            </summary>
            <returns> The current network protocol version</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetNetListening">
            <summary>
            Returns true if client is actively listening for network connections.
            </summary>
            <returns>true when listening, otherwise false.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetNetPeerCount">
            <summary>
            Returns number of peers currenly connected to the client.
            </summary>
            <returns>integer of the number of connected peers.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetProtocolVersion">
            <summary>
            Returns the current ethereum protocol version.
            </summary>
            <returns>The current ethereum protocol version</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetSyncing">
            <summary>
            Returns an object object with data about the sync status or FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetCoinbase">
            <summary>
            Returns the client coinbase address.
            </summary>
            <returns>the current coinbase address.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetMining">
            <summary>
            Returns true if client is actively mining new blocks.
            </summary>
            <returns>returns true of the client is mining, otherwise false.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetHashrate">
            <summary>
            Returns the number of hashes per second that the node is mining with.
            </summary>
            <returns>number of hashes per second.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetGasPrice">
            <summary>
            Returns the current price per gas in wei.
            </summary>
            <returns>integer of the current gas price in wei.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetAccounts">
            <summary>
            Returns a list of addresses owned by client.
            </summary>
            <returns>addresses owned by the client.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetBlockNumber">
            <summary>
            Returns the number of most recent block.
            </summary>
            <returns> integer of the current block number the client is on.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetBalance(System.String,EthereumRpc.BlockTag,System.Int32)">
            <summary>
            Returns the balance of the account of given address.
            </summary>
            <param name="address">address to check for balance.</param>
            <param name="blockTag"> integer block number</param>
            <param name="blockNumber">Block param</param>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetStorageAt(System.String,System.Int32,EthereumRpc.BlockTag,System.Int32)">
            <summary>
            Returns the value from a storage position at a given address.
            </summary>
            <param name="address"> address of the storage.</param>
            <param name="storagePosition">integer of the position in the storage.</param>
            <param name="blockTag">Block Param</param>
            <param name="blockNumber">integer block number</param>
            <returns>the value at this storage position.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetTransactionCount(System.String,EthereumRpc.BlockTag,System.Int32)">
            <summary>
            Returns the number of transactions sent from an address.
            </summary>
            <param name="address">address</param>
            <param name="blockTag">Block Param</param>
            <param name="blockNumber">integer block number,</param>
            <returns>integer of the number of transactions send from this address.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetBlockTransactionCountByHash(System.String)">
            <summary>
            Returns the number of transactions in a block from a block matching the given block hash.
            </summary>
            <param name="blockHash"> hash of a block</param>
            <returns> integer of the number of transactions in this block.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetBlockTransactionCountByNumber(EthereumRpc.BlockTag,System.Int32)">
            <summary>
            Returns the number of transactions in a block from a block matching the given block number.
            </summary>
            <param name="blockTag">Block Param</param>
            <param name="blockNumber">integer of a block number,</param>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetUncleCountByBlockHash(System.String)">
            <summary>
            Returns the number of uncles in a block from a block matching the given block hash.
            </summary>
            <param name="hashBlock">hash of a block</param>
            <returns> integer of the number of uncles in this block.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetUncleCountByBlockNumber(System.Int32)">
            <summary>
            Returns the number of uncles in a block from a block matching the given block number.
            </summary>
            <param name="blockNumber">integer of a block number</param>
            <returns>integer of the number of uncles in this block.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.GetCode(System.String,EthereumRpc.BlockTag,System.Int32)">
            <summary>
            Returns code at a given address.
            </summary>
            <param name="address">address</param>
            <param name="blockTag"></param>
            <param name="blockNumber">integer block number,</param>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.Sign(System.String,System.String)">
            <summary>
            Signs data with a given address.
            </summary>
            <param name="address">address</param>
            <param name="data">Data to sign</param>
            <returns>Signed data</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.SendTransaction(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new message call transaction or a contract creation, if the data field contains code.
            </summary>
            <param name="from">The address the transaction is send from.</param>
            <param name="to">(optional when creating new contract) The address the transaction is directed to.</param>
            <param name="gas">(optional, default: 90000) Integer of the gas provided for the transaction execution. It will return unused gas.</param>
            <param name="data">(optional) The compiled code of a contract</param>
            <param name="gasPrice">(optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas</param>
            <param name="value">(optional) Integer of the value send with this transaction</param>
            <param name="nonce">(optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.</param>
            <returns>the transaction hash, or the zero hash if the transaction is not yet available.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.SendRawTransaction(System.String)">
            <summary>
            Creates new message call transaction or a contract creation for signed transactions.
            </summary>
            <param name="data">The signed transaction data.</param>
            <returns> the transaction hash, or the zero hash if the transaction is not yet available.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.NewFilter(EthereumRpc.Ethereum.Filter)">
            <summary>
            Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call GetFilterChanges.
            </summary>
            <param name="fromBlock">(optional, default: "latest") Integer block number, </param>
            <param name="toBlock"></param>
            <param name="address"></param>
            <param name="topics"></param>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.SubmitWork(System.String,System.String,System.String)">
            <summary>
            Used for submitting a proof-of-work solution.
            </summary>
            <param name="nonce">The nonce found(64 bits)</param>
            <param name="powHash">The header's pow-hash (256 bits)</param>
            <param name="mix">The mix digest(256 bits)</param>
            <returns> returns true if the provided solution is valid, otherwise false.</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.SubmitHashrate(System.String,System.String)">
            <summary>
            Used for submitting mining hashrate.
            </summary>
            <param name="hashRate">a hexadecimal string representation (32 bytes) of the hash rate</param>
            <param name="clientId">A random hexadecimal(32 bytes) ID identifying the client</param>
            <returns></returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.ShhVersion">
            <summary>
            Returns the current whisper protocol version.
            </summary>
            <returns>The current whisper protocol version</returns>
        </member>
        <member name="M:EthereumRpc.EthereumService.UnlockAccount(System.String,System.String)">
            <summary>
            Unlocks account using password
            </summary>
            <param name="account">The account address</param>
            <param name="password">The password for the account</param>
            <returns></returns>
        </member>
    </members>
</doc>
